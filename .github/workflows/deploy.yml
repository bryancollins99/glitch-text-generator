name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to DO Droplet
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key and known hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          KNOWN_HOSTS: ${{ secrets.DO_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${KNOWN_HOSTS}" > ~/.ssh/known_hosts
          # No need for chmod 644 on known_hosts, default is fine or 600 also works.

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_SSH_HOST }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            
            echo "üöÄ Starting deployment to DigitalOcean server..."
            REMOTE_DIR="${{ secrets.DO_REMOTE_DIR }}"
            DOMAIN_NAME="${{ secrets.DO_DOMAIN }}" # Changed to DOMAIN_NAME to avoid conflict with shell's DOMAIN variable
            REPO_URL="https://github.com/${{ github.repository }}.git"

            echo "‚úÖ SSH connection successful. Deploying to $REMOTE_DIR"

            echo "üì• Ensuring remote directory exists and pulling latest changes..."
            if [ -d "$REMOTE_DIR/.git" ]; then
              cd "$REMOTE_DIR"
              echo "Git repository found. Pulling latest changes..."
              git checkout main
              git fetch origin
              git reset --hard origin/main
              git pull origin main
            else
              echo "Git repository not found. Cloning..."
              mkdir -p "$REMOTE_DIR"
              git clone "$REPO_URL" "$REMOTE_DIR"
              cd "$REMOTE_DIR"
            fi
            
            echo "üê≥ Docker operations..."
            echo "üö´ Stopping old container (if any)..."
            docker stop glitch-app || echo "No container named glitch-app to stop or already stopped."
            echo "üóëÔ∏è Removing old container (if any)..."
            docker rm glitch-app || echo "No container named glitch-app to remove or already removed."
            
            echo "üèóÔ∏è Building new Docker image..."
            docker build -t glitch-text-generator .
            
            echo "‚ñ∂Ô∏è Starting new Docker container..."
            docker run -d --restart unless-stopped --name glitch-app -p 8000:8000 glitch-text-generator
            
            echo "üîß Executing Nginx setup script..."
            # Ensure the script is executable and then run it, passing the domain name
            chmod +x .scripts/setup_nginx.sh
            # Pass the domain name from GitHub secrets to the script
            ./.scripts/setup_nginx.sh "$DOMAIN_NAME"
            
            echo "‚úÖ Deployment to $DOMAIN_NAME complete!"
            echo "   App should be available at http://$DOMAIN_NAME" 